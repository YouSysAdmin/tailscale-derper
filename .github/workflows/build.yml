name: Docker Image

on:
  push:
    branches: [ main ]
  schedule:
    # Start every Monday at 00:00
    - cron: '0 0 * * MON'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  IMAGE_NAME: yousysadmin/tailscale-derper

permissions:
  contents: read
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: GitHub Docker Registry auth
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          logout: false

      ## ----------------------------------------------------------
      ##  Build prepare
      ## ----------------------------------------------------------
      - name: Get latest tailscale version
        run: |
          LATEST_TAILSCALE_VERSION=$(curl -s https://api.github.com/repos/tailscale/tailscale/releases/latest | jq -r '.tag_name')
          echo LATEST_TAILSCALE_VERSION=$LATEST_TAILSCALE_VERSION >> $GITHUB_ENV
          echo "Latest tailscale version: $LATEST_TAILSCALE_VERSION"

      - name: Check Github registry that version does not exist
        run: |
          ENCODED_TOKEN=$(echo -n "${{ secrets.GITHUB_TOKEN }}" | base64)
          TAGS=$(curl -s -H "Authorization: Bearer ${ENCODED_TOKEN}" \
               https://ghcr.io/v2/${{ env.IMAGE_NAME }}/tags/list)

          ## Check if TAGS is empty or null
          if [[ -z "$TAGS" || "$TAGS" == "null" ]]; then
            echo "No tags found, treating as image not existing."
            echo "First build :)"
          else
            ## Check if the specific tag already exists
            if echo "$TAGS" | jq -e --arg TAG "${{ env.LATEST_TAILSCALE_VERSION }}" '.tags | index($TAG)'; then
              echo "Image with tag ${{ env.LATEST_TAILSCALE_VERSION }} already exists."
              echo DOCKER_IMAGE_EXISTS='yes' >> $GITHUB_ENV
            else
              echo "Image with tag ${{ env.LATEST_TAILSCALE_VERSION }} not found."
              echo "An image for the Tailscale version ${{ env.LATEST_TAILSCALE_VERSION }} will be build"
              echo DOCKER_IMAGE_EXISTS='no' >> $GITHUB_ENV
            fi
          fi

      ## ----------------------------------------------------------
      ##  Build new image if not exist
      ## ----------------------------------------------------------
      - name: Setup up QEMU action
        if: ${{ github.event_name != 'schedule' || env.DOCKER_IMAGE_EXISTS == 'no' }}
        uses: docker/setup-qemu-action@v3

      - name: Setup up Docker Buildx action
        if: ${{ github.event_name != 'schedule' || env.DOCKER_IMAGE_EXISTS == 'no' }}
        uses: docker/setup-buildx-action@v3

      - name: Build image and push to the registry
        if: ${{ github.event_name != 'schedule' || env.DOCKER_IMAGE_EXISTS == 'no' }}
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64, linux/arm64
          push: true
          tags: |
            ghcr.io/${{ env.IMAGE_NAME }}:latest
            ghcr.io/${{ env.IMAGE_NAME }}:${{ env.LATEST_TAILSCALE_VERSION }}
          build-args: |
            DERP_VERSION=${{ env.LATEST_TAILSCALE_VERSION }}
